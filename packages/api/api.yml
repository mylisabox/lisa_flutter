openapi: 3.0.0info:  title: L.I.S.A. API v1  description: L.I.S.A. API v1  contact:    email: jimmy.aumard@gmail.com  license:    name: MIT License  version: v1security:  - Bearer:      [ ]paths:  /api/v1/chatBots/userBot/{scene}:    parameters:      - name: scene        in: path        required: true        schema:          type: string    delete:      operationId: deleteScene      responses:        200:          description: ""      tags:        - scene  /api/v1/chatBots/userBot:    get:      operationId: getScene      responses:        200:          content:            application/json:              schema:                $ref: '#/components/schemas/ScenesResponse'          description: ""      tags:        - scene    post:      operationId: saveScene      requestBody:        required: true        content:          application/json:            schema:              $ref: '#/components/schemas/Scene'      responses:        200:          description: ""      tags:        - scene  /api/v1/plugins/store:    get:      operationId: getStorePlugins      responses:        200:          content:            application/json:              schema:                type: array                items:                  $ref: '#/components/schemas/StorePlugin'          description: ""      tags:        - plugin  /api/v1/plugins/install:    post:      operationId: installPlugin      requestBody:        required: true        content:          application/json:            schema:              type: object              title: AddPluginRequest              properties:                id:                  type: string                version:                  type: string                from:                  type: string      responses:        200:          description: ""      tags:        - plugin  /api/v1/plugins/{pluginName}/uninstall:    parameters:      - name: pluginName        in: path        required: true        schema:          type: string    delete:      operationId: uninstallPlugin      responses:        204:          description: ""      tags:        - plugin  /api/v1/plugins/{pluginName}/drivers/{driver}/pairing:    parameters:      - name: pluginName        in: path        required: true        schema:          type: string      - name: driver        in: path        required: true        schema:          type: string    post:      operationId: pairing      requestBody:        required: true        content:          application/json:            schema:              type: object              additionalProperties:                type: object      responses:        200:          content:            application/json:              schema:                $ref: '#/components/schemas/PairingResponse'          description: ""      tags:        - plugin  /api/v1/plugins/search:    get:      operationId: searchPlugins      parameters:        - name: query          in: query          required: true          schema:            type: string        - name: activated          in: query          schema:            type: boolean            default: true      responses:        200:          content:            application/json:              schema:                type: array                items:                  $ref: '#/components/schemas/Plugin'          description: ""      tags:        - plugin  /api/v1/devices/:    post:      operationId: addDevice      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/CreateDevice"      responses:        201:          description: ""      tags:        - device    get:      parameters:        - name: roomId          in: query          required: false          schema:            type: string      operationId: getDevices      responses:        200:          description: ""          content:            application/json:              schema:                type: array                items:                  "$ref": "#/components/schemas/Device"      tags:        - device  /api/v1/devices/data:    parameters:        - name: deviceIds          in: query          required: true          schema:            type: array            items:                type: integer    get:        operationId: getDevicesData        responses:          200:            description: ""            content:                application/json:                  schema:                    type: array                    items:                        "$ref": "#/components/schemas/Device"        tags:          - device  /api/v1/devices/{deviceId}/data:      parameters:          - name: deviceId            in: path            required: true            schema:              type: integer      get:          operationId: getDeviceData          responses:              200:                description: ""                content:                    application/json:                      schema:                        "$ref": "#/components/schemas/Device"          tags:              - device  /api/v1/devices/{deviceId}/trigger:    parameters:        - name: deviceId          in: path          required: true          schema:            type: integer    get:        operationId: triggerDevice        responses:            200:              description: ""        tags:            - device  /api/v1/devices/{deviceId}:    parameters:      - name: deviceId        in: path        required: true        schema:          type: integer    delete:      operationId: deleteDevice      responses:        200:          description: ""      tags:        - device    patch:      operationId: saveDeviceInfo      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/UpdateDeviceInfoRequest"      responses:        200:          description: ""      tags:        - device    post:      operationId: updateDevice      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/UpdateDeviceDataRequest"      responses:        200:          content:            application/json:              schema:                "$ref": "#/components/schemas/Device"          description: ""      tags:        - device  /api/v1/devices/groups/{deviceType}:    parameters:        - name: roomId          in: query          required: false          schema:            type: integer        - name: deviceType          in: path          required: true          schema:            type: string    post:      operationId: triggerGroup      requestBody:        required: true        content:          application/json:            schema:              type: object              additionalProperties: true      responses:        200:          description: ""      tags:        - device  /api/v1/devices/groups/{type}:    parameters:      - name: roomId        in: query        required: false        schema:          type: integer      - name: type        in: path        required: true        schema:          type: string    post:      operationId: updateGroup      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/UpdateDeviceDataRequest"      responses:        200:          description: ""      tags:        - device  /api/v1/rooms:    get:      operationId: getRooms      description: ""      responses:        200:          content:            application/json:              schema:                "$ref": "#/components/schemas/RoomResponse"          description: ""      tags:        - room    post:      operationId: addRoom      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/Room"      responses:        200:          content:            application/json:              schema:                "$ref": "#/components/schemas/Room"          description: ""      tags:        - room  /api/v1/rooms/reorder:    post:      operationId: reorderRooms      description: ""      requestBody:        required: true        content:          application/json:            schema:              type: array              items:                type: integer      responses:        200:          description: ""      tags:        - room  /api/v1/rooms/{roomId}:    parameters:      - name: roomId        in: path        required: true        schema:          type: integer    delete:      operationId: deleteRoom      description: ""      responses:        200:          description: ""      tags:        - room    put:      operationId: saveRoom      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/Room"      responses:        200:          description: ""      tags:        - room  /api/v1/initialized:    get:      operationId: isInitialized      description: ""      responses:        200:          content:            application/json:              schema:                "$ref": "#/components/schemas/IsInitialized"          description: ""      tags:        - config  /api/v1/auth/login:    post:      operationId: login      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/LoginRequest"      responses:        200:          description: ""          content:            application/json:              schema:                "$ref": "#/components/schemas/LoginResponse"      tags:        - auth      security:        [ ]  /api/v1/auth/register:    post:      operationId: register      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/UserUpdate"      responses:        200:          description: ""          content:            application/json:              schema:                "$ref": "#/components/schemas/LoginResponse"      tags:        - auth      security:        [ ]  /api/v1/auth/token:      post:        operationId: refreshToken        description: ""        requestBody:          required: true          content:            application/json:              schema:                type: object                title: RefreshTokenRequest                properties:                    refreshToken:                        type: string                        nullable: false        responses:          200:            description: ""            content:              application/json:                schema:                    "$ref": "#/components/schemas/LoginResponse"        tags:          - auth        security:          [ ]  /api/v1/setup/voiceCommand:    post:      operationId: setupVoiceCommand      description: ""      requestBody:        required: true        content:          multipart/form-data:            schema:              "$ref": "#/components/schemas/SetupVoiceCommand"      responses:        "200":          description: All good      tags:        - setup  /api/v1/users/me:    get:      operationId: getProfile      description: ""      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/User"      tags:        - user    patch:      operationId: saveProfile      description: ""      requestBody:        content:          multipart/form-data:            schema:              "$ref": "#/components/schemas/UserUpdate"      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/User"      tags:        - user  /api/v1/chatBots/interact:    post:      operationId: interact      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/InteractRequest"      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/InteractResponse"      tags:        - chatbotservers:  - url: http://mylisabox:3000/  - url: http://localhost:3000/components:  securitySchemes:    Bearer:      in: header      name: Authorization      type: apiKey  schemas:    InteractRequest:      type: object      required:        - sentence      properties:        sentence:          type: string        lang:          type: string        context:          type: object          additionalProperties:            type: object    InteractResponse:      type: object      required:        - userId        - lang        - action        - userSentence        - responses        - response      properties:        action:          type: string        lang:          type: string        userId:          type: integer        userSentence:          type: string        response:          type: string        responses:          type: array          items:            type: string    PairingResponse:      type: object      additionalProperties:        type: object    StorePlugin:      type: object      required:        - id        - name        - description        - installed      properties:        id:          type: string          nullable: false        name:          type: string          nullable: false        image:          type: string          nullable: true        description:          type: string          nullable: false        installed:          type: boolean          nullable: false    Plugin:      type: object      required:        - id        - name        - description      properties:        id:          type: string        name:          type: string        description:          nullable: true          type: string        image:          nullable: true          type: string        devicesSettings:          type: array          items:            $ref: '#/components/schemas/DeviceSettings'    DeviceSettings:      type: object      required:        - name        - driver        - image        - pairing        - pluginName        - template      properties:        name:          type: string        driver:          type: string        image:          type: string        imageOn:          nullable: true          type: string        imageOff:          nullable: true          type: string        defaultAction:          nullable: true          type: string        pairing:          type: string        pluginName:          type: string        description:          type: string        type:          nullable: true          type: string        template:          type: object          additionalProperties:            type: object        settings:          nullable: true          type: object          additionalProperties:            type: object    Dashboard:      type: object      required:        - id        - roomId        - userId        - widgets      properties:        id:          type: integer        roomId:          type: integer          nullable: true        userId:          type: integer        widgets:          type: array          items:            $ref: '#/components/schemas/Device'    CreateDevice:        type: object        required:          - name          - pluginName          - type        properties:          roomId:            nullable: true            type: integer          name:            type: string          driver:            nullable: true            type: string          pluginName:            nullable: false            type: string          type:            $ref: '#/components/schemas/DeviceTypeEnum'          template:            type: object            nullable: true            additionalProperties:              type: object              nullable: true          data:            type: object            additionalProperties:              type: object              nullable: true          defaultAction:            type: string            nullable: true          imageOn:            nullable: true            type: string          imageOff:            nullable: true            type: string    Device:      type: object      required:        - id        - name        - pluginName        - favorite        - type        - sortOrder        - powered      properties:        id:          readOnly: true          type: integer        roomId:          nullable: true          type: integer        grouped:          type: boolean          default: false        groupCount:          type: integer          default: 0        children:          type: array          items:            $ref: "#/components/schemas/Device"          nullable: true        name:          type: string        defaultAction:            type: string            nullable: true        driver:          nullable: true          type: string        powered:          nullable: false          type: boolean        imageOn:          nullable: true          type: string        imageOff:          nullable: true          type: string        sortOrder:          nullable: false          type: integer        pluginName:          nullable: false          type: string        type:          $ref: '#/components/schemas/DeviceTypeEnum'        template:          type: object          nullable: true          additionalProperties:            type: object            nullable: true        data:          type: object          additionalProperties:            type: object            nullable: true        favorite:          type: boolean          default: false    DeviceTypeEnum:      type: string      enum:        - light        - webcam        - thermostat        - shutter        - sensor        - media        - speaker        - other    UpdateDeviceInfoRequest:      type: object      required:        - name      properties:        name:          type: string        roomId:          type: integer    UpdateDeviceDataRequest:      type: object      additionalProperties:        type: object    RoomResponse:      type: array      items:        $ref: "#/components/schemas/Room"    Room:      type: object      required:        - id        - name        - devices        - sortOrder      properties:        id:          nullable: true          type: integer        sortOrder:          nullable: false          type: integer        name:          nullable: false          type: string        devices:          type: array          items:            $ref: "#/components/schemas/Device"    LoginRequest:      type: object      required:        - email        - password      properties:        email:          type: string        password:          type: string    LoginResponse:      type: object      required:        - token        - refreshToken      properties:        token:          type: string        refreshToken:          type: string    SetupVoiceCommand:      type: object      required:        - config      properties:        config:          type: string          format: binary    UserUpdate:      type: object      properties:        email:          type: string          format: email          nullable: false        firstName:          type: string          nullable: false        lang:          type: string          nullable: false        lastName:          type: string          nullable: false        mobile:          type: string          nullable: false        password:          type: string          nullable: false        avatar:          type: string          format: binary          nullable: false    User:      type: object      required:        - id        - email        - firstName        - lastName        - lang      properties:        id:          type: integer        email:          type: string          format: email        firstName:          nullable: false          type: string        lang:          type: string        lastName:          nullable: false          type: string        mobile:          nullable: true          type: string        avatar:          nullable: true          type: string    IsInitialized:      type: object      required:        - initialized      properties:        initialized:          type: boolean    ScenesResponse:      type: array      items:        $ref: '#/components/schemas/Scene'    Scene:      type: object      required:        - name        - displayName        - data      properties:        name:          type: string        displayName:          type: string        data:          $ref: '#/components/schemas/SceneData'    SceneData:      type: object      required:        - sentences        - responses        - commands      properties:        sentences:          type: array          items:            type: string        responses:          type: array          items:            type: string        commands:          type: array          items:            type: string